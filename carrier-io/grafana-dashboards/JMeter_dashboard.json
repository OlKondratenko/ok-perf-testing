{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 1,
  "id": 1,
  "iteration": 1579257801103,
  "links": [],
  "panels": [
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": false,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "datasource": "jmeter",
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 4,
        "w": 4,
        "x": 0,
        "y": 0
      },
      "id": 10,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "",
      "targets": [
        {
          "alias": "total_req",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "SELECT COUNT(response_time) FROM  \"$test\"  WHERE  \"simulation\"= '$test' AND \"test_type\"='$test_type' AND sampler_type=~ /^$sampler_type$/ AND  \"env\"='$env' AND $timeFilter ",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "thresholds": "",
      "title": "Total Requests",
      "transparent": true,
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": false,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "datasource": "jmeter",
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 4,
        "w": 4,
        "x": 4,
        "y": 0
      },
      "id": 11,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "",
      "targets": [
        {
          "alias": "total_req",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "SELECT COUNT(response_time) FROM  \"$test\"  WHERE  \"simulation\"= '$test' AND \"test_type\"='$test_type' AND sampler_type=~ /^$sampler_type$/ AND  \"env\"='$env' AND \"status\" = 'KO'  AND $timeFilter GROUP BY count",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "thresholds": "",
      "title": "Failed Requests",
      "transparent": true,
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": false,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "datasource": "jmeter",
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 4,
        "w": 4,
        "x": 8,
        "y": 0
      },
      "id": 12,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "",
      "targets": [
        {
          "alias": "total_req",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "SELECT MEAN(\"throughput\") FROM  (SELECT count(\"response_time\") AS \"throughput\"  from \"$test\"  WHERE \"simulation\"= '$test' AND \"test_type\"='$test_type' AND sampler_type=~ /^$sampler_type$/ AND  \"env\"='$env' AND $timeFilter GROUP BY time(1s))",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "thresholds": "",
      "title": "Average RPS",
      "transparent": true,
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": false,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "datasource": "jmeter",
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 4,
        "w": 4,
        "x": 12,
        "y": 0
      },
      "id": 13,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "",
      "targets": [
        {
          "alias": "total_req",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "SELECT min(\"response_time\") FROM  \"$test\"  WHERE  \"simulation\"= '$test' AND \"status\" = 'OK' AND sampler_type=~ /^$sampler_type$/ AND  \"env\"='$env' AND $timeFilter ",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "thresholds": "",
      "title": "Min, ms",
      "transparent": true,
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": false,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "datasource": "jmeter",
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 4,
        "w": 4,
        "x": 16,
        "y": 0
      },
      "id": 14,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "",
      "targets": [
        {
          "alias": "total_req",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "SELECT median(\"response_time\") FROM  \"$test\"  WHERE  \"simulation\"= '$test' AND \"status\" = 'OK' AND sampler_type=~ /^$sampler_type$/  AND  \"env\"='$env' AND $timeFilter ",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "thresholds": "",
      "title": "Median, ms",
      "transparent": true,
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": false,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "datasource": "jmeter",
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 4,
        "w": 4,
        "x": 20,
        "y": 0
      },
      "id": 15,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "",
      "targets": [
        {
          "alias": "total_req",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "SELECT percentile(\"response_time\", $percentile) FROM  \"$test\"  WHERE  \"simulation\"= '$test' AND \"status\" = 'OK' AND sampler_type=~ /^$sampler_type$/  AND  \"env\"='$env' AND $timeFilter ",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "thresholds": "",
      "title": "Percentile $percentile, ms",
      "transparent": true,
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "jmeter",
      "decimals": 2,
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 4
      },
      "id": 2,
      "legend": {
        "alignAsTable": true,
        "avg": true,
        "current": false,
        "hideEmpty": false,
        "hideZero": false,
        "max": true,
        "min": true,
        "rightSide": true,
        "show": true,
        "total": false,
        "values": true
      },
      "lines": true,
      "linewidth": 1,
      "links": [],
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 3,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [
        {
          "alias": "active users",
          "yaxis": 2
        },
        {
          "alias": "active users",
          "color": "#7eb26d"
        }
      ],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "alias": "$tag_request_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "orderByTime": "ASC",
          "policy": "default",
          "query": "SELECT percentile(\"response_time\", $percentile) FROM \"$test\" WHERE \"simulation\"='$test' AND \"test_type\"='$test_type' AND  \"env\"='$env' and \"status\"='OK' AND sampler_type=~ /^$sampler_type$/ AND $timeFilter GROUP BY time($grouping), request_name fill(none)",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "FAILED.$tag_request_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "orderByTime": "ASC",
          "policy": "default",
          "query": "SELECT percentile(\"response_time\", $percentile) FROM \"$test\" WHERE \"simulation\"='$test' AND \"test_type\"='$test_type' AND  \"env\"='$env' and \"status\"='KO' AND sampler_type=~ /^$sampler_type$/ AND $timeFilter GROUP BY time($grouping), request_name fill(null)",
          "rawQuery": true,
          "refId": "C",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "active users",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "orderByTime": "ASC",
          "policy": "default",
          "query": "select sum(\"max\") from (select max(\"active\") from \"users\" where \"test_type\"='$test_type' AND  \"env\"='$env' group by lg_id) WHERE $timeFilter GROUP BY time($grouping) fill(0)",
          "rawQuery": true,
          "refId": "E",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Response Times Over Time ($grouping aggregation)",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "decimals": null,
          "format": "ms",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": "0",
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "jmeter",
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 15
      },
      "id": 4,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 1,
      "links": [],
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 5,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [
        {
          "alias": "active users",
          "yaxis": 2
        },
        {
          "alias": "max",
          "bars": true,
          "color": "#cca300",
          "lines": false,
          "stack": true,
          "zindex": 0
        },
        {
          "alias": "failed",
          "bars": true,
          "color": "#bf1b00",
          "lines": false,
          "stack": true
        },
        {
          "alias": "mean",
          "bars": true,
          "color": "#508642",
          "lines": false,
          "stack": false,
          "zindex": 3
        }
      ],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "alias": "active users",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "select sum(\"max\") from (select max(\"active\") from \"users\" group by lg_id) WHERE $timeFilter GROUP BY time($grouping) fill(0)",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "max",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "SELECT max(\"throughputt\") FROM (SELECT count(\"response_time\") AS \"throughputt\"  from \"$test\"  WHERE \"simulation\"= '$test' AND \"test_type\"='$test_type' AND  \"env\"='$env' AND \"status\" = 'OK' AND sampler_type=~ /^$sampler_type$/  AND $timeFilter GROUP BY time(1s)) GROUP BY time($grouping)",
          "rawQuery": true,
          "refId": "B",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "mean",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "SELECT mean(\"throughput\") FROM (SELECT count(\"response_time\") AS \"throughput\"  from \"$test\"  WHERE \"simulation\"= '$test' AND \"test_type\"='$test_type' AND  \"env\"='$env' AND \"status\" = 'OK' AND sampler_type=~ /^$sampler_type$/  AND $timeFilter GROUP BY time(1s)) GROUP BY time($grouping)",
          "rawQuery": true,
          "refId": "C",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "failed",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "SELECT max(\"throughputt\") FROM (SELECT count(\"response_time\") AS \"throughputt\"  from \"$test\"  WHERE \"simulation\"= '$test' AND \"test_type\"='$test_type' AND  \"env\"='$env' AND \"status\" = 'KO' AND sampler_type=~ /^$sampler_type$/ AND $timeFilter GROUP BY time(1s)) GROUP BY time($grouping)",
          "rawQuery": true,
          "refId": "D",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Throughput ($grouping aggregation)",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "decimals": null,
          "format": "short",
          "label": "RPS",
          "logBase": 1,
          "max": null,
          "min": "0",
          "show": true
        },
        {
          "format": "short",
          "label": "Active Users",
          "logBase": 1,
          "max": null,
          "min": "0",
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "aliasColors": {},
      "bars": true,
      "dashLength": 10,
      "dashes": false,
      "datasource": "jmeter",
      "decimals": 0,
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 0,
        "y": 26
      },
      "id": 6,
      "legend": {
        "alignAsTable": true,
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "rightSide": true,
        "show": true,
        "total": true,
        "values": true
      },
      "lines": false,
      "linewidth": 1,
      "links": [],
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 5,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [
        {
          "alias": "errors",
          "bars": true,
          "color": "#bf1b00"
        }
      ],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "alias": "t < $low_limit ms",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "SELECT COUNT(\"response_time\") FROM \"$test\" WHERE simulation='$test' AND status='OK' AND sampler_type=~ /^$sampler_type$/ AND \"response_time\"<=$low_limit AND env ='$env' AND $timeFilter GROUP BY time($grouping) fill(null)",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "$low_limit  < t < $high_limit",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "SELECT COUNT(\"response_time\") FROM \"$test\" WHERE simulation='$test' AND status='OK' AND sampler_type=~ /^$sampler_type$/ AND \"response_time\">$low_limit AND \"response_time\"<$high_limit  AND env ='$env' AND $timeFilter GROUP BY time($grouping) fill(null)",
          "rawQuery": true,
          "refId": "B",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "t > $high_limit",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "SELECT COUNT(\"response_time\")  FROM \"$test\" WHERE simulation='$test' AND status='OK' AND sampler_type=~ /^$sampler_type$/ AND \"response_time\">=$high_limit  AND env ='$env' AND $timeFilter GROUP BY time($grouping) fill(null)",
          "rawQuery": true,
          "refId": "C",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "errors",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "SELECT COUNT(\"response_time\") FROM \"$test\" WHERE simulation='$test' AND status='KO' AND sampler_type=~ /^$sampler_type$/ AND env ='$env' AND $timeFilter GROUP BY time($grouping) fill(null)",
          "rawQuery": true,
          "refId": "D",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Response time distribution",
      "tooltip": {
        "shared": false,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "series",
        "name": null,
        "show": true,
        "values": [
          "total"
        ]
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": false
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "jmeter",
      "decimals": 0,
      "fill": 1,
      "fillGradient": 0,
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 12,
        "y": 26
      },
      "id": 17,
      "legend": {
        "alignAsTable": true,
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "rightSide": true,
        "show": true,
        "total": true,
        "values": true
      },
      "lines": true,
      "linewidth": 1,
      "links": [],
      "nullPointMode": "null",
      "options": {
        "dataLinks": []
      },
      "percentage": false,
      "pointradius": 5,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "alias": "$tag_request_name",
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "SELECT mean(\"connect_time\") FROM \"$test\" WHERE  \"env\" =~ /^$env$/ AND \"test_type\" =~ /^$test_type$/ AND sampler_type=~ /^$sampler_type$/ AND $timeFilter GROUP BY time($grouping), \"request_name\" fill(null)",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "HTTP(S) Connect Times ",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "ms",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "collapsed": true,
      "datasource": null,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 35
      },
      "id": 23,
      "panels": [
        {
          "content": "<script type=\"text/javascript\" language=\"javascript\" src=\"//cdn.datatables.net/1.10.13/js/jquery.dataTables.min.js \"/>\n<script>\nfunction generateQuery(){\n    var AND  = ' AND ';\n    var WHERE = ' WHERE ';\n    var GROUP_BY = ' GROUP BY request_name; ';\n    var query;\n    var measurement = getVar('test');\n    var environments = ' env=\\'' +  getVar('env') + '\\'';\n    var test_type = ' test_type=\\'' +  getVar('test_type') + '\\'';\n    var simulation = ' simulation=\\'' +  getVar('test') + '\\'';\n\n    var timeFilter = ' time > ' + $__from + 'ms AND time < ' + $__to + 'ms'\n    var from_block =  '\"' + measurement + '\"' + WHERE + simulation + AND + environments + AND + test_type;\n\n    query = 'SELECT COUNT(response_time) AS \"total\" FROM ' + from_block + AND +  timeFilter + GROUP_BY;\n    query += 'SELECT COUNT(response_time) AS \"ok\" FROM ' + from_block + AND + 'status= \\'OK\\'' + AND + timeFilter + GROUP_BY;\n\n    duplicate_part =  from_block + AND +  timeFilter + GROUP_BY;\n    query += 'SELECT sum(\"last\") AS \"rps\" FROM (SELECT last(\"tpsRate\") from ' + from_block + AND + ' status= \\'OK\\' AND ' + timeFilter+ ' group by lg_id) GROUP BY request_name;'\n    query += 'SELECT MIN(response_time) AS \"min\", MEAN(response_time) AS \"average\", MAX(response_time) AS \"max\"  FROM ' + duplicate_part;\n    query += 'SELECT MEDIAN(response_time)        AS \"median\" FROM ' + duplicate_part;\n    query += 'SELECT PERCENTILE(response_time,75) AS \"perc75\" FROM ' + duplicate_part;\n    query += 'SELECT PERCENTILE(response_time,95) AS \"perc95\" FROM ' + duplicate_part;\n    query += 'SELECT PERCENTILE(response_time,99) AS \"perc99\" FROM ' + duplicate_part;\n    query += 'SELECT PERCENTILE(latency, 95) AS \"Latency\" FROM ' + duplicate_part;\n\n    return query;\n};\n\nfunction getVar(varName, onAllEmpty = true) {\n        var vars = angular.element('dashboard-submenu').injector().get('variableSrv').variables;\n        var result = [];\n        vars.forEach(function (variable) {\n            if (variable.name == varName) {\n                if (variable.options[0].value == \"$__all\" && variable.options[0].selected) {\n                    if (onAllEmpty) { return []; } else {\n                        for (var i = 1; i < variable.options.length; i++) {\n                            result.push(variable.options[i].value);\n                        }\n                        return result\n                    }\n                } else {\n                    variable.options.forEach(function (option) {\n                        if (option.selected) { result.push(option.value); }\n                    });\n                }\n            };\n        });\n\n        return result\n    };\n\nfunction formatDataset(data){\n    rows = {};\n    results = data.results;\n    results.forEach(function(result, i) {\n        series = result.series;\n        series.forEach(function(serie, s) {\n            var request_name = serie.tags.request_name\n            var keys = serie.columns.slice(1);\n            var values = serie.values[0].slice(1);\n            var row = (request_name in rows) ? rows[request_name] : {};\n            values.forEach( function(value, v) {\n                row[keys[v]] = value!=null ? value : 0;\n            });\n            rows[request_name] = row;\n        });\n    });\n    return rows\n}\n\nfunction appendSTRow(row){\n    $('#summary-table').DataTable().row.add(row).draw()\n}\n\nfunction retrieveData(db_name, query){\n    $.get(\"/grafana/api/datasources/proxy/1/query\", { q: query, db: \"$db_name\", epoch: EPOCH},\n        function(data, status){\n            if(status == 'success'){\n                var series = data.results[0].series\n                if(typeof series == 'undefined'){\n                    showErrMessage(\"No datapoints in selected time range. Try to change filter parameters.\")\n                }else{\n                    removeSpinner()\n                    var rows = formatDataset(data)\n                    generateSummaryDataTable()\n                    for (request_name in rows){\n                        request = rows[request_name]\n                        var total =  request['total']\n                        var ok = request['ok'] ==null ? 0 : request['ok']\n                        var ko =  total > ok  ? total - ok : 0\n\n                        var ko_perc = ko > 0 ? parseFloat((ko/total) * 100).toFixed(ROUND_FLOAT_FACTOR) : 0.00\n                        var rps = request['rps'] ==null ? 0.0 : parseFloat(request['rps']).toFixed(3)\n                        var min = request['min'] ==null ? 0.0 : parseFloat(request['min']/1000).toFixed(ROUND_FLOAT_FACTOR)\n                        var median = request['median'] ==null ? 0.0 : parseFloat(request['median']/1000).toFixed(ROUND_FLOAT_FACTOR)\n                        var perc75 = request['perc75'] ==null ? 0.0 : parseFloat(request['perc75']/1000).toFixed(ROUND_FLOAT_FACTOR)\n                        var perc95 = request['perc95'] ==null ? 0.0 : parseFloat(request['perc95']/1000).toFixed(ROUND_FLOAT_FACTOR)\n                        var perc99 = request['perc99'] ==null ? 0.0 : parseFloat(request['perc99']/1000).toFixed(ROUND_FLOAT_FACTOR)\n                        var max = request['max'] ==null ? 0.0 : parseFloat(request['max']/1000).toFixed(ROUND_FLOAT_FACTOR)\n                        var average = request['average'] ==null ? 0.0 : parseFloat(request['average']/1000).toFixed(ROUND_FLOAT_FACTOR)\n                        var latency = request['Latency'] ==null ? 0.0 : parseFloat(request['Latency']/1000).toFixed(ROUND_FLOAT_FACTOR)\n                        row = [request_name, total, ok, ko, ko_perc, rps, min, median, perc75, perc95, perc99, max, average, latency]\n\n                        appendSTRow(row)\n                    }\n                }\n            }else{\n                showErrMessage(\"Error occured during quering data. Check your datasource settings.\")\n            }\n        });\n}\n\nfunction emptySummaryTable(){\n    $(\"#summary\").empty();\n}\n\nfunction addSpinner(){\n    if ($('div.spinner').length == 0){\n        var spinner = $('<div>')\n        spinner.attr(\"class\",\"spinner\");\n        spinner.html(\"<div  style=\\\"text-align: center;\\\"> <i class=\\\"fa fa-spinner fa-spin\\\" style=\\\" font-size: xx-large;\\\"></i> </div>\")\n        $(\"#summary\").append(spinner)\n    }\n}\nfunction removeSpinner(){\n    $('#summary div.spinner').remove()\n}\n\nfunction initSummaryDataTable(table){\n    table.DataTable({\n        \"empty\": true,\n        \"iDisplayLength\": 10,\n        \"lengthMenu\": [[5, 10, 20, 40, -1], [5, 10, 20, 40, \"All\"]],\n        \"order\": [[ 0, \"asc\" ]],\n        \"pagingType\": \"full_numbers\",\n        \"responsive\": true,\n        \"rowCallback\": function(row, data, index){\n            // errors\n            if(data[4] > 0. && data[4] <= ERROR_PERC_TRESHOLD){\n                $(row).find('td:eq(3)').css('color', 'orange');\n                $(row).find('td:eq(4)').css('color', 'orange');\n            }else if(data[4] > ERROR_PERC_TRESHOLD){\n                $(row).find('td:eq(3)').css('color', 'red');\n                $(row).find('td:eq(4)').css('color', 'red');\n            }\n            // response times\n            for (var i = 6; i <= 13; i++){\n\n                if(data[i] < LOWER_RT_TRESHOLD){\n                    $(row).find('td:eq('+i+')').css('color', 'green');\n                    $(row).find('td:eq('+i+')').css('color', 'green');\n                }else if(data[i] > HIGHER_RT_TRESHOLD){\n\n                    $(row).find('td:eq('+i+')').css('color', 'red');\n                    $(row).find('td:eq('+i+')').css('color', 'red');\n                }else{\n                    $(row).find('td:eq('+i+')').css('color', 'orange');\n                    $(row).find('td:eq('+i+')').css('color', 'orange');\n                }\n            }\n        }\n    });\n}\n\nfunction generateSummaryDataTable(){\n    emptySummaryTable();\n    var table = $('<table>');\n    table.attr(\"id\",\"summary-table\");\n    table.append(generateSTHead());\n    table.append(generateSTBody());\n    $('#summary').append(table);\n    initSummaryDataTable(table);\n    addSTSelectionFeature();\n}\n\nfunction generateSTHead(){\n    var cellNames = [\"Requests\",\"Total\",\"OK\",\"KO\",\"% KO\",\"Req/s\",\"Min\",\"50th pct\",\"75th pct\",\"95th pct\",\"99th pct\",\"Max\",\"Average\", \"Latency\"];\n    tHead = $('<thead>');\n    tHead.attr(\"id\",\"summary-table-head\");\n    tRow = $('<tr>');\n    for (var i = 0; i < cellNames.length; i++){\n        tHeadCell = $('<th>');\n        tHeadCell.text(cellNames[i])\n        tRow.append(tHeadCell);\n    }\n    tHead.append(tRow);\n\n    return tHead;\n}\nfunction generateSTBody(){\n    var tBody = $('<tbody>');\n    tBody.attr(\"id\",\"summary-table-body\");\n\n    return tBody;\n}\n\nfunction addSTSelectionFeature(){\n    var table = $('#summary-table').DataTable();\n    $('#summary-table tbody').on( 'click', 'tr', function () {\n        if ($(this).hasClass('selected')) {\n            $(this).removeClass('selected');\n        }\n        else {\n            table.$('tr.selected').removeClass('selected');\n            $(this).addClass('selected');\n        }\n    } );\n\n    $('#button').click( function () {\n        table.row('.selected').remove().draw( false );\n    } );\n}\n\nfunction showErrMessage(errMessage){\n    removeSpinner();\n    $(\"#summary\").empty();\n    message = $('<span>');\n    message.attr(\"id\",\"summary-table-message\");\n    message.text(errMessage);\n    $(\"#summary\").append(message);\n}\n\n\nfunction start(){\n    addSpinner();\n    query = generateQuery();\n    db_name = getVar('db_name');\n    retrieveData(db_name, query);\n}\n\nEPOCH = \"ms\";\nTABLE_TIME_EPOCH = 's'; //s for seconds, any other value for milliseconds\n\nLOWER_RT_TRESHOLD = parseFloat(\"$low_limit\")/1000.0\nHIGHER_RT_TRESHOLD = parseFloat(\"$high_limit\")/1000.0\nERROR_PERC_TRESHOLD = 1.0;\nROUND_FLOAT_FACTOR = 3;\n\n$(document).ready(function () {\n    console.log(angular.element('grafana-app').injector().get('$rootScope'))\n    start();\n});\nangular.element('grafana-app').injector().get('$rootScope').$on('refresh', function () { start() });\n</script>\n\n\n<style type=\"text/css\">\n    #summary-table-body>tr.selected{ background: #292929; font-weight: 600;} #summary-table-body>tr:hover{ background: #292929;} #summary-table td{text-align:center} #summary-table-body > tr>:nth-child(1) {text-align:left}\n    #summary-table_filter,.dataTables_length{display:inline-block}.dataTables_length{padding-bottom:20px;padding-right:23px}input[type=search]{border-radius:5px}select[name=summary-table_length]{height:23px;width:65px;border-radius:5px}.paging_full_numbers>a,.paging_full_numbers>span>a{padding-right:10px}#summary-table-message{display:table;margin-left:auto;margin-right:auto}#summary-table{width:100%!important}th{text-align:center}\n</style>\n<div id = \"summary\"></div>\n\n\n",
          "datasource": null,
          "gridPos": {
            "h": 12,
            "w": 24,
            "x": 0,
            "y": 36
          },
          "id": 27,
          "mode": "html",
          "options": {},
          "timeFrom": null,
          "timeShift": null,
          "title": "Panel Title",
          "type": "text"
        }
      ],
      "title": "Summary table",
      "type": "row"
    },
    {
      "collapsed": true,
      "datasource": null,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 36
      },
      "id": 21,
      "panels": [
        {
          "content": "<script type=\"text/javascript\" charset=\"utf8\" src=\"https://cdn.datatables.net/1.10.19/js/jquery.dataTables.js\"></script>\n<script>\n\n    function getVar(varName, onAllEmpty = true) {\n        var vars = angular.element('dashboard-submenu').injector().get('variableSrv').variables;\n        var result = [];\n        vars.forEach(function (variable) {\n            if (variable.name == varName) {\n                if (variable.options[0].value == \"$__all\" && variable.options[0].selected) {\n                    if (onAllEmpty) { return []; } else {\n                        for (var i = 1; i < variable.options.length; i++) {\n                            result.push(variable.options[i].value);\n                        }\n                        return result\n                    }\n                } else {\n                    variable.options.forEach(function (option) {\n                        if (option.selected) { result.push(option.value); }\n                    });\n                }\n            };\n        });\n\n        return result\n    };\n\n    function getData() {\n       var test = getVar('test')\n        $.ajax({\n            type: \"GET\",\n            url: '/grafana/api/datasources/proxy/6/api/prom/query',\n            async: false,\n            data: {\n                direction: \"BACKWARD\",\n                limit: 100000,\n                query: '{filename=\"/tmp/'+test+'.log\"}',\n                start: $__from + \"000000\",\n                end: $__to + \"000000\"\n            },\n            success: function (data) {\n                test = JSON.parse(data)\n            },\n            error: function (json, code) {\n                console.log(\"Some error occured: \")\n                console.error(json)\n            }\n        });\n        var error_entries = []\n        var streams = test.streams\n        if (streams == null){\n          return null\n        }\n        \n        for (var stream of test.streams) {\n            Array.prototype.push.apply(error_entries, stream.entries);\n            //console.log(error_entries)\n        }\n        return error_entries\n    }\n\n    function agregateRecivedData() {\n        var records = getData()\n        if (records == null) {\n          return []\n        }\n    \n        var errorCollection = []\n        var resultMap = new Map()\n\n        for (var record of records) {\n            var test = record.line\n            if (test.startsWith(\"Error key\")) {\n                errorCollection.push(test)\n            }\n            \n        }\n      \n        for (var error of errorCollection) {\n            try {\n                var errorKey = error.match(\"Error key: (.+?)\\t\")[1]\n                var errorJson = {}\n                errorJson.errorCount = 1\n                if (resultMap.has(errorKey)) {\n                    var temp = resultMap.get(errorKey).errorCount\n                    errorJson.errorCount += temp\n                }\n                errorJson.method = error.match(\"Method: (.+?)\\t\")[1]\n                if (errorJson.method == 'TRANSACTION'){\n                    continue;\n                }\n                console.log()\n            \n                errorJson.requestName = error.match(\"Request name: (.+?)\\t\")[1]\n                errorJson.responceCode = error.match(\"Response code: (.+?)\\t\")[1]\n                errorJson.URL = error.match(\"URL: (.+?)\\t\")[1]\n                errorJson.errorMessage = error.match(\"Error message: (.+?)\\t\")[1]\n                errorJson.headers = error.match(\"Headers: (.+?)\\t\")[1]\n                errorJson.requestParams = error.match(\"Request params: (.+?)\\t\")[1]\n                errorJson.responceBody = error.match(\"Response body: (.+?)\\t\")[1]\n                resultMap.set(errorKey, errorJson)\n            } catch {\n              resultMap.set(errorKey, errorJson)\n              continue;\n            }\n            \n        }\n        return resultMap\n    }\n\n    function parseRecivedData() {\n        var data = agregateRecivedData()\n        \n\n        for (var [errorId, errorDetail] of data) {\n            console.log(errorId + ' = ' + errorDetail);\n            var errorDetailRow = generateDetailBox(errorId,errorDetail)\n            appendRow(errorDetailRow, errorDetail.errorCount)\n        }\n        \n    }\n\n    function appendRow(errorDetails, errorCount) {\n        $('#error-table').DataTable().row.add([errorDetails, errorCount]).draw()\n        initAccordeon()\n    }\n    function initAccordeon() {\n        $('.accordeon-title').on('click', function () {\n            var title = $(this);\n            if (title.hasClass('is-opened')) {\n                title.next('.accordeon-content').slideUp(function () {\n                    $(this).prev('.accordeon-title').removeClass('is-opened');\n                })\n            } else {\n                var content = title.next('.accordeon-content');\n                if (!content.is(':visible')) {\n                    content.slideDown(function () { title.addClass('is-opened') });\n                }\n            }\n        })\n        $('div[id=\"error-table_wrapper\"]').change(function () { initAccordeon() })\n        $('#error-table_paginate a').click(function () { initAccordeon() })\n    }\n\n    function generateDetailBox(errorId, errorDetail) {\n        var box = \"<div class=\\\"accordeon\\\"> <div class=\\\"accordeon-title\\\"><div id=\\\"title-wrapper\\\" data-title=\\\"\" + errorDetail.errorMessage + \"\\\">\"\n            + errorId + \"</div> </div > <div class=\\\"accordeon-content\\\"> <div class=\\\"separator\\\"> <div id=\\\"detail-data\\\">\"\n            + \"Request URL: \"+errorDetail.URL + \" </div> </div> <div class=\\\"separator\\\"> <div id=\\\"detail-data\\\">\"\n            +\"Request method: \"+ errorDetail.method + \" </div> </div> \" + paramMatch(errorDetail.requestParams)\n            + headersMatch(errorDetail.headers, 'errorId') + \" <div class=\\\"separator\\\"> <div id=\\\"detail-data\\\">\"\n            + \"Response code: \"+errorDetail.responceCode + \" </div> </div> <div class=\\\"separator\\\"> <div id=\\\"detail-data\\\">\"\n            + \"Error message: \"+errorDetail.errorMessage + \" </div> </div>\" + respMatch(errorDetail.responceBody, errorId) + \"</div>\"\n\n        return box;\n    }\n\n    function paramMatch(param) {\n        html = ''\n        if (param !== undefined) {\n            var req_arr = param.match(/Request params \\d+: .*?/g)\n        if (req_arr == null) {\n            return \"<div class=\\\"separator\\\"> <div id=\\\"detail-data\\\">\"\n                    + \" Request parameters: \"+ param + \" </div> </div>\"\n        } else {\n            req_arr.forEach(function (req_param) {\n                html += \"<div class=\\\"separator\\\"> <div id=\\\"detail-data\\\">\"\n                    + req_param + \" </div> </div>\"\n            })\n        }\n        } else {\n            return \"<div class=\\\"separator\\\"> <div id=\\\"detail-data\\\">\"\n                    + \" Request parameters: </div> </div>\"\n        }\n        \n        return html\n    }\n\n    function headersMatch(headers, error_type) {\n        if (headers !== undefined) {\n            var resp_arr = headers.match(/Headers \\d+: .*?/g)\n        html = ''\n        if (resp_arr == null) {\n            headers = formatErrorDetails(headers)\n            return \"<div class=\\\"separator\\\"> <div id=\\\"detail-data\\\" \"\n                + \"onclick=\\\"openPopUp('\" + error_type + \"')\\\" class=\\\"\" + error_type + \"\\\">\" \n                + \"Request headers: \"+ headers + \" </div> </div><div class=\\\"err-popup\\\" id=\\\"\" + error_type\n                + \"\\\" onclick=\\\"closePopUp('\" + error_type + \"')\\\">\"\n                + \" <div id=\\\"err-popup-inner\\\" onclick=\\\"event.stopPropagation()\\\">\"\n                + \"<div class=\\\"err-popup-content-\" + error_type + \"\\\" id=\\\"err-popup-content\\\"> </div> \"\n                + \"<span class=\\\"err-popup-close\\\" onclick=\\\"closePopUp('\" + error_type + \"')\\\">&#10006;</span></div></div>\"\n        } /*else {\n            resp_arr.forEach(function (res, index) {\n                res = formatErrorDetails(res)\n                html += \"<div class=\\\"separator\\\"> <div id=\\\"detail-data\\\" \"\n                    + \"onclick=\\\"openPopUp('\" + error_type + index + \"')\\\" class=\\\"\" + error_type + index + \"\\\">\"\n                    + res + \" </div> </div><div class=\\\"err-popup\\\" id=\\\"\" + error_type + index\n                    + \"\\\" onclick=\\\"closePopUp('\" + error_type + index + \"')\\\">\"\n                    + \" <div id=\\\"err-popup-inner\\\" onclick=\\\"event.stopPropagation()\\\">\"\n                    + \"<div class=\\\"err-popup-content-\" + error_type + index + \"\\\" id=\\\"err-popup-content\\\"> </div> \"\n                    + \"<span class=\\\"err-popup-close\\\" onclick=\\\"closePopUp('\" + error_type + index + \"')\\\">&#10006;</span></div></div>\"\n            })\n        } */\n        }\n        \n        return html\n    }\n\n    function respMatch(response, error_type) {\n        if (response !== undefined) {\n            var resp_arr = response.match(/Response \\d+: .*?/g)\n        html = ''\n        if (resp_arr == null) {\n            response = formatErrorDetails(response)\n            return \"<div class=\\\"separator\\\"> <div id=\\\"detail-data\\\" \"\n                + \"onclick=\\\"openPopUp('\" + error_type + \"')\\\" class=\\\"\" + error_type + \"\\\">\" \n                + \"Response body: \"+ response + \" </div> </div></div><div class=\\\"err-popup\\\" id=\\\"\" + error_type\n                + \"\\\" onclick=\\\"closePopUp('\" + error_type + \"')\\\">\"\n                + \" <div id=\\\"err-popup-inner\\\" onclick=\\\"event.stopPropagation()\\\">\"\n                + \"<div class=\\\"err-popup-content-\" + error_type + \"\\\" id=\\\"err-popup-content\\\"> </div> \"\n                + \"<span class=\\\"err-popup-close\\\" onclick=\\\"closePopUp('\" + error_type + \"')\\\">&#10006;</span></div></div>\"\n        } else {\n            resp_arr.forEach(function (res, index) {\n                res = formatErrorDetails(res)\n                html += \"<div class=\\\"separator\\\"> <div id=\\\"detail-data\\\" \"\n                    + \"onclick=\\\"openPopUp('\" + error_type + index + \"')\\\" class=\\\"\" + error_type + index + \"\\\">\"\n                    + res + \" </div> </div><div class=\\\"err-popup\\\" id=\\\"\" + error_type + index\n                    + \"\\\" onclick=\\\"closePopUp('\" + error_type + index + \"')\\\">\"\n                    + \" <div id=\\\"err-popup-inner\\\" onclick=\\\"event.stopPropagation()\\\">\"\n                    + \"<div class=\\\"err-popup-content-\" + error_type + index + \"\\\" id=\\\"err-popup-content\\\"> </div> \"\n                    + \"<span class=\\\"err-popup-close\\\" onclick=\\\"closePopUp('\" + error_type + index + \"')\\\">&#10006;</span></div></div>\"\n            })\n        }\n        } else {\n            return ''\n        }\n       \n        return html + \"</div>\"\n    }\n\n    function formatErrorDetails(str) {\n        str = str.replace(/</g, '&lt');\n        str = str.replace(/>/g, '&gt');\n        return str;\n    }\n    function openPopUp(err_type) {\n        $('#' + err_type).fadeIn(350);\n        $('.err-popup-content-' + err_type).text($('.' + err_type).text());\n    }\n\n    function closePopUp(err_type) {\n        $('#' + err_type).fadeOut(350);\n        $('.err-popup-content-' + err_type).text(\"\");\n    }\n\n    \n\n    function generateErrorTable() {\n        emptyErrorTable()\n        var table = $('<table>');\n        table.attr(\"id\", \"error-table\");\n        table.append(generateErrorTableHead());\n        table.append(generateErrorTableBody());\n        $('#errors').append(table);\n        initDataTable(table);\n        addSelectionFeature();\n    }\n\n    function emptyErrorTable() {\n        if ($('#error-table').length > 0) {\n            if ($.fn.DataTable.isDataTable('#error-table')) {\n                $('#error-table').DataTable().destroy();\n            }\n        }\n        $(\"#errors\").empty();\n    }\n\n    function generateErrorTableHead() {\n        var cellNames = [\"Error ID\", \"Count\"];\n        tHead = $('<thead>')\n        tHead.attr(\"id\", \"error-table-head\");\n        tRow = $('<tr>');\n        for (var i = 0; i < cellNames.length; i++) {\n            tHeadCell = $('<th>');\n            tHeadCell.attr(\"id\", cellNames[i])\n            tHeadCell.text(cellNames[i])\n            tRow.append(tHeadCell);\n        }\n        tHead.append(tRow);\n        return tHead;\n    }\n\n    function generateErrorTableBody() {\n        var tBody = $('<tbody>');\n        tBody.attr(\"id\", \"error-table-body\");\n        return tBody;\n    }\n\n    function initDataTable(table) {\n        table.DataTable({\n            \"empty\": true,\n            \"lengthMenu\": [[5, 10, 20, -1], [5, 10, 20, \"All\"]],\n            \"order\": [[1, \"desc\"]],\n            \"pagingType\": \"full_numbers\",\n            \"responsive\": true,\n            \"initComplete\": function (settings, json) {\n                console.log('DataTables initialised.');\n            }\n        });\n    }\n\n    function addSelectionFeature() {\n        var table = $('#error-table').DataTable();\n        $('#error-table tbody').on('click', 'tr', function () {\n            if ($(this).hasClass('selected')) {\n                $(this).removeClass('selected');\n            }\n            else {\n                table.$('tr.selected').removeClass('selected');\n                $(this).addClass('selected');\n            }\n        });\n        $('#button').click(function () {\n            table.row('.selected').remove().draw(false);\n        });\n    }\n\n    function run(){\n        generateErrorTable()\n        parseRecivedData()\n    }\n\n    $(document).ready(function () {\n        run();\n    });\n    angular.element('grafana-app').injector().get('$rootScope').$on('refresh', function () { console.log(\"Hello\"); });\n</script>\n\n<style>\n    #mark_button {\n        background-color: #00678b;\n        color: white;\n        border: 2px solid #00678b;\n        border-radius: 12px;\n    }\n\n    #mark_button:hover {\n        background-color: #04b3f8;\n    }\n</style>\n<style>\n        input[type=text],\n        input[type=password] {\n            width: 100%;\n            padding: 5px 10px;\n            ;\n            margin: 4px 2px;\n            display: inline-block;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n    \n        input[type=submit] {\n            width: 100%;\n            background-color: #e7e7e7;\n            color: black;\n            padding: 4px 10px;\n            ;\n            margin: 8px 0;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n    \n    \n        input[type=submit]:hover {\n            background-color: #e7e7e7;\n        }\n    \n        .button {\n            background-color: #e7e7e7;\n            border: none;\n            color: white;\n            padding: 4px 10px;\n            text-align: center;\n            text-decoration: none;\n            display: inline-block;\n            font-size: 15px;\n            margin: 4px 2px;\n            -webkit-transition-duration: 0.5s;\n            transition-duration: 0.5s;\n            cursor: pointer;\n        }\n    \n        .jira_button {\n            background-color: #00678b;\n            color: white;\n            border: 2px solid #00678b;\n            border-radius: 4px;\n        }\n    \n        .jira_button:hover {\n            background-color: #04b3f8;\n        }\n    \n        .err-popup {\n            width: 100%;\n            height: 100%;\n            display: none;\n            position: fixed;\n            top: 0;\n            left: 0;\n            background: rgba(9, 9, 9, .75);\n            z-index: 9999\n        }\n    \n        #error-table_filter,\n        .dataTables_length,\n        .err-popup-close {\n            display: inline-block\n        }\n    \n        #err-popup-inner {\n            max-height: 90%;\n            overflow-y: scroll;\n            width: 90%;\n            padding: 40px;\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            -webkit-transform: translate(-50%, -50%);\n            transform: translate(-50%, -50%);\n            box-shadow: 0 2px 6px rgba(0, 0, 0, 1);\n            border-radius: 3px;\n            background: #1f1d1d;\n            color: #e3e3e3;\n            font-weight: 500\n        }\n    \n        #err-popup-content {\n            word-wrap: break-word;\n            word-break: break-all;\n            max-height: 90%;\n            overflow-y: scroll\n        }\n    \n        .err-popup-close:hover {\n            color: #fff\n        }\n    \n        .err-popup-close {\n            font-size: 15px !important;\n            width: 30px;\n            height: 30px;\n            padding-top: 4px;\n            position: absolute;\n            top: 20px;\n            right: 15px;\n            transition: ease .25s all;\n            -webkit-transform: translate(50%, -50%);\n            transform: translate(50%, -50%);\n            border-radius: 1000px;\n            font-family: Arial, Sans-Serif;\n            text-align: center;\n            line-height: 100%;\n            color: #e3e3e3;\n            text-decoration: none\n        }\n    \n        .dataTables_length {\n            padding-bottom: 20px;\n            padding-right: 23px\n        }\n    \n        input[type=search] {\n            border-radius: 5px\n        }\n    \n        select[name=error-table_length] {\n            height: 23px;\n            width: 65px;\n            border-radius: 5px\n        }\n    \n        .paging_full_numbers>a,\n        .paging_full_numbers>span>a {\n            padding-right: 10px\n        }\n    \n        #errors-table-message {\n            display: table;\n            margin-left: auto;\n            margin-right: auto\n        }\n    \n        #error-table {\n            width: 100%\n        }\n    \n        th {\n            text-align: center\n        }\n    \n        table[id=error-table]>*>tr>td:nth-child(1) {\n            width: 50%;\n            word-break: break-all\n        }\n    \n        table[id=error-table]>*>tr>td:nth-child(2) {\n            width: 5%;\n            text-align: center\n        }\n    \n        table[id=error-table]>*>tr>td:nth-child(3) {\n            width: 15%;\n            text-align: center\n        }\n    \n        .accordeon {\n            width: 100%;\n            font-family: helvetica, sans-serif;\n            margin: -7px -7px -7px 0\n        }\n    \n        .accordeon-title {\n            background-color: #1f1d1d;\n            padding-top: 10px;\n            cursor: pointer;\n            padding-bottom: 10px\n        }\n    \n        .accordeon-title:before {\n            content: \"+\";\n            float: left;\n            font-size: 20px;\n            color: #f2f2f2;\n            border: 1px solid #f2f2f2;\n            width: 20px;\n            height: 20px;\n            line-height: 17px;\n            text-align: center;\n            margin-right: 10px\n        }\n    \n        .accordeon-title.is-opened:before {\n            content: \"-\"\n        }\n    \n        table[class=error-details-table]>*>tr>td:nth-child(1) {\n            width: 12%;\n            border-right-color: #fff\n        }\n    \n        .accordeon-content>.separator:last-child {\n            border-bottom: 0;\n            margin-bottom: 0\n        }\n    \n        table[class=error-details-table] {\n            border: none\n        }\n    \n        .accordeon-content {\n            display: none;\n            padding-left: 20px;\n            padding-bottom: 10px\n        }\n    \n        #detail-data,\n        #detail-label {\n            display: inline-block;\n            padding: 10px\n        }\n    \n        #detail-label {\n            vertical-align: top;\n            width: 10%;\n            max-width: 135px;\n            word-break: break-word;\n            border-right: 1px solid #292929\n        }\n        \n        #detail-data {\n            border-left: 1px solid #292929;\n            word-break: break-all;\n            width: 100%;\n            margin-left: -1px;\n            max-height: 75px;\n            overflow: hidden\n        }\n    \n        #title-wrapper {\n            height: 20px;\n            overflow: hidden\n        }\n    \n        .separator {\n            display: block;\n            border-bottom: 1px solid #292929;\n            margin-bottom: -7px\n        }\n    </style>\n\n<div id=\"errors\">",
          "datasource": null,
          "gridPos": {
            "h": 8,
            "w": 24,
            "x": 0,
            "y": 37
          },
          "id": 19,
          "mode": "html",
          "options": {},
          "timeFrom": null,
          "timeShift": null,
          "title": "Panel Title",
          "type": "text"
        }
      ],
      "title": "Error table",
      "type": "row"
    }
  ],
  "refresh": false,
  "schemaVersion": 20,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "allValue": null,
        "current": {
          "selected": true,
          "text": "95",
          "value": "95"
        },
        "hide": 0,
        "includeAll": false,
        "label": null,
        "multi": false,
        "name": "percentile",
        "options": [
          {
            "selected": false,
            "text": "50",
            "value": "50"
          },
          {
            "selected": false,
            "text": "75",
            "value": "75"
          },
          {
            "selected": false,
            "text": "90",
            "value": "90"
          },
          {
            "selected": true,
            "text": "95",
            "value": "95"
          },
          {
            "selected": false,
            "text": "99",
            "value": "99"
          }
        ],
        "query": "50,75,90,95,99",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "allValue": null,
        "current": {
          "text": "baseline",
          "value": "baseline"
        },
        "datasource": "jmeter",
        "definition": "SHOW TAG VALUES FROM /.*/ WITH KEY = \"test_type\"",
        "hide": 0,
        "includeAll": false,
        "label": "Test Type",
        "multi": false,
        "name": "test_type",
        "options": [],
        "query": "SHOW TAG VALUES FROM /.*/ WITH KEY = \"test_type\"",
        "refresh": 1,
        "regex": "/[^users]/",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "folio",
          "value": "folio"
        },
        "datasource": "jmeter",
        "definition": "SHOW TAG VALUES FROM /.*/ WITH KEY = \"simulation\"",
        "hide": 0,
        "includeAll": false,
        "label": "Test",
        "multi": false,
        "name": "test",
        "options": [],
        "query": "SHOW TAG VALUES FROM /.*/ WITH KEY = \"simulation\"",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "int",
          "value": "int"
        },
        "datasource": "jmeter",
        "definition": "SHOW TAG VALUES FROM /.*/ WITH KEY = \"env\"",
        "hide": 0,
        "includeAll": false,
        "label": "Environment",
        "multi": false,
        "name": "env",
        "options": [],
        "query": "SHOW TAG VALUES FROM /.*/ WITH KEY = \"env\"",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "auto": true,
        "auto_count": 1,
        "auto_min": "1s",
        "current": {
          "text": "1s",
          "value": "1s"
        },
        "hide": 0,
        "label": "Grouping",
        "name": "grouping",
        "options": [
          {
            "selected": false,
            "text": "auto",
            "value": "$__auto_interval_grouping"
          },
          {
            "selected": true,
            "text": "1s",
            "value": "1s"
          },
          {
            "selected": false,
            "text": "5s",
            "value": "5s"
          },
          {
            "selected": false,
            "text": "10s",
            "value": "10s"
          },
          {
            "selected": false,
            "text": "30s",
            "value": "30s"
          },
          {
            "selected": false,
            "text": "1m",
            "value": "1m"
          },
          {
            "selected": false,
            "text": "5m",
            "value": "5m"
          },
          {
            "selected": false,
            "text": "10m",
            "value": "10m"
          },
          {
            "selected": false,
            "text": "30m",
            "value": "30m"
          },
          {
            "selected": false,
            "text": "1h",
            "value": "1h"
          },
          {
            "selected": false,
            "text": "6h",
            "value": "6h"
          },
          {
            "selected": false,
            "text": "12h",
            "value": "12h"
          },
          {
            "selected": false,
            "text": "1d",
            "value": "1d"
          }
        ],
        "query": "1s,5s,10s,30s,1m,5m,10m,30m,1h,6h,12h,1d",
        "refresh": 2,
        "skipUrlSync": false,
        "type": "interval"
      },
      {
        "current": {
          "selected": true,
          "text": "250",
          "value": "250"
        },
        "hide": 0,
        "label": "Yellow Threshold",
        "name": "low_limit",
        "options": [
          {
            "selected": true,
            "text": "250",
            "value": "250"
          }
        ],
        "query": "250",
        "skipUrlSync": false,
        "type": "textbox"
      },
      {
        "current": {
          "selected": true,
          "text": "700",
          "value": "700"
        },
        "hide": 0,
        "label": "Red Threshold",
        "name": "high_limit",
        "options": [
          {
            "selected": true,
            "text": "700",
            "value": "700"
          }
        ],
        "query": "700",
        "skipUrlSync": false,
        "type": "textbox"
      },
      {
        "current": {
          "selected": true,
          "text": "jmeter",
          "value": "jmeter"
        },
        "hide": 2,
        "label": null,
        "name": "db_name",
        "options": [
          {
            "selected": true,
            "text": "jmeter",
            "value": "jmeter"
          }
        ],
        "query": "jmeter",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "allValue": null,
        "current": {
          "text": "All",
          "value": "$__all"
        },
        "datasource": "jmeter",
        "definition": "SHOW TAG VALUES FROM /.*/ WITH KEY = \"sampler_type\"",
        "hide": 0,
        "includeAll": true,
        "label": "Sampler type",
        "multi": false,
        "name": "sampler_type",
        "options": [],
        "query": "SHOW TAG VALUES FROM /.*/ WITH KEY = \"sampler_type\"",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      }
    ]
  },
  "time": {
    "from": "2020-01-16T15:47:22.150Z",
    "to": "2020-01-16T16:52:52.613Z"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ],
    "time_options": [
      "5m",
      "15m",
      "1h",
      "6h",
      "12h",
      "24h",
      "2d",
      "7d",
      "30d"
    ]
  },
  "timezone": "",
  "title": "Jmeter Performance",
  "uid": "q69rYQlik",
  "version": 10
}